on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          override: true
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
  documentation:
    name: documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps
  build:
    name: build & test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v3
    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose
  minimal_build:
    name: build & test with minimal versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v3
    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: -Z minimal-versions --verbose
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: -Z minimal-versions --verbose
  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: "llvm-tools"
    - name: Install cargo-tarpaulin
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-tarpaulin
    - name: Run cargo-tarpaulin
      uses: actions-rs/cargo@v1
      with:
        command: tarpaulin
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v1.0.2
      with:
        token: ${{secrets.CODECOV_TOKEN}}
    - name: Archive code coverage results
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage-report
        path: cobertura.xml
  miri:
    name: miri
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: miri
          override: true
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Run cargo miri
        uses: actions-rs/cargo@v1
        with:
          command: miri
          args: test
